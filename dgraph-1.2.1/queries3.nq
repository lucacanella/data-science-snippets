################
# Schema

<genres>: [uid] @reverse .
<name>: string @index(exact, term) @upsert .
<rated>: [uid] @reverse .
<movie>: uid @reverse .
<rate>: int .

type Person {
  name
  rated
}

type Rating {
  movie
  rate
}

type Movie {
  name
  genres
}

type Genre {
  name
}

#################
# Data

{
  set {
  
    #Genres
    _:ac <dgraph.type> "Genre" .
    _:ac <name> "Action" .
    
    _:ad <dgraph.type> "Genre" .
    _:ad <name> "Adventure" .
    
    _:dr <dgraph.type> "Genre" .
    _:dr <name> "Drama" .
    
    _:ro <dgraph.type> "Genre" .
    _:ro <name> "Romance" .
    
    _:co <dgraph.type> "Genre" .
    _:co <name> "Comedy" .
    
    #Movies
    _:t <dgraph.type> "Movie" .
    _:t <name> "Titanic" .
    _:t <genres> _:dr .
    _:t <genres> _:ro .
    
    _:fb <dgraph.type> "Movie" .
    _:fb <name> "First Blood" .
    _:fb <genres> _:ad .
    _:fb <genres> _:ac .
    
    _:fj <dgraph.type> "Movie" .
    _:fj <name> "Young Frankenstein" .
    _:fj <genres> _:co .
    
    #People
    _:a <dgraph.type> "Person" .
    _:a <name> "Arturo" .
    
    _:b <dgraph.type> "Person" .
    _:b <name> "Bruno" .
    
    _:c <dgraph.type> "Person" .
    _:c <name> "Carla" .
    
    #Ratings
    _:a1 <dgraph.type> "Rating" .
    _:a2 <dgraph.type> "Rating" .
    _:a3 <dgraph.type> "Rating" .
    _:a1 <movie> _:fb .
    _:a1 <rate> "4" .
    _:a2 <movie> _:t .
    _:a2 <rate> "2" .
    _:a3 <movie> _:fj .
    _:a3 <rate> "2" .
    _:a <rated> _:a1 .
    _:a <rated> _:a2 .
    _:a <rated> _:a3 .
    
    _:b1 <dgraph.type> "Rating" .
    _:b2 <dgraph.type> "Rating" .
    _:b3 <dgraph.type> "Rating" .
    _:b1 <movie> _:fb .
    _:b1 <rate> "4" .
    _:b2 <movie> _:t .
    _:b2 <rate> "5" .
    _:b3 <movie> _:fj .
    _:b3 <rate> "3" .
    _:b <rated> _:b1 .
    _:b <rated> _:b2 .
    _:b <rated> _:b3 .
    
    _:c1 <dgraph.type> "Rating" .
    _:c2 <dgraph.type> "Rating" .
    _:c3 <dgraph.type> "Rating" .
    _:c1 <movie> _:fb .
    _:c1 <rate> "3" .
    _:c2 <movie> _:t .
    _:c2 <rate> "5" .
    _:c3 <movie> _:fj .
    _:c3 <rate> "2" .
    _:c <rated> _:c1 .
    _:c <rated> _:c2 .
    _:c <rated> _:c3 .

  }
}

#################
# Queries

{
  #Load everybody
  p(func: type("Person")) {
    expand(_all_)
  }
}

{
  #Load ratings
  r(func: type("Rating")) {
    expand(_all_)
  }
}


{
  #Load movies
  m(func: type("Movie")) {
    expand(_all_)
  }
}

{
  #Load genres
  g(func: type("Genre")) {
    expand(_all_)
  }
}

{
  #Genres for a given movie
  t(func: type("Movie")) @filter(eq(name, "Titanic")) {
    name
    genres {
      name
    }
  }
}

{
  #Movies for a given genre
  ac(func: type("Genre")) @filter(eq(name, "Action")) {
    name
    movies: ~genres {
      name
    }
  }
}

{
  #Ratings for given movie
  ac(func: type("Movie")) @filter(eq(name, "Young Frankenstein")) {
    name
    ratings: ~movie {
      rate 
    	people: ~rated {
        name
      }
    }
  }
}

{
  #Genres liked by someone
  a(func: type("Person")) @filter(eq(name, "Arturo")) {
    name
    rated @facets(gt(rating, 3)) {
      name
      genres {
        name
      }
    }
  }
}

#Get someone who rated the same movies as someone did
{  
  b(func: type("Person")) @filter(eq(name, "Bruno")) @ignorereflex @cascade {
    name
    rated {
      rate
      movie {
        name
        with_ratings: ~movie {
          rate2: rate
          people: ~rated {
            name
          }
        }
      }
    }
  }
}

#Get people who gave the same rating to at least one movie as someone did
{
  #As of version 1.2.1 must be split into two queries to achieve the correct result
  # https://discuss.dgraph.io/t/howto-filter-by-propagating-a-variable/6056/4
  #First load the first person and his rates
  B as var(func: type("Person")) @filter(eq(name, "Bruno")) {
    rated {
      #store rates as variable rate1
      rate1 as rate
    }
  }
  #Then look for friends
  friends(func: uid(B)) @ignorereflex @cascade {
    name
    rated {
      rate
      movie {
        name
        with_ratings: ~movie @filter(eq(rate, val(rate1))) {
          rate
          people: ~rated {
            name
          }
        }
      }
    }
  }
}

#Someone's average rating
{
  p(func: type("Person")) @filter(eq(name, "Carla")) {
    name
    rated @facets(r as rating) {
      name
    }
    avg(val(r))
  }
}

{
  # Movie average for all users
  # Calculating the average ratings of users requires a variable that maps users to the sum of their ratings.
  # https://docs.dgraph.io/query-language/#facets-and-aggregation
  var(func: type("Person")) {
    num_rated as math(1)
    rated @facets(r as rating) {
      avg_rating as math(r / num_rated)
    }
  }

  data(func: uid(avg_rating)) {
    name
    val(avg_rating)
  }
}

######################
# Clear all data

upsert {
  query {
    a(func: has(name)) {
      people as uid
    }
    b(func: type("Rating")) {
      rates as uid
    }
  }
  mutation {
    delete {
      uid(people) * * .
      uid(rates) * * .
    }
  }
}